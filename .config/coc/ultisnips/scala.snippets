
snippet File "Description" b
//-----------------------------------------------------------------------------
// File          : `!v expand('%:t')`
object CNTMain extends App {
  iotesters.Driver.execute(args, () => new CNT) {
	 c => new CNTUnitTester(c)
  }
}
// Author        : MinJae Kim  <gimminjae@islab.re.kr>
// Created       : `date +%d.%m.20%y`
// Last modified : `date +%d.%m.20%y`
//-----------------------------------------------------------------------------
// Description :
// $1
//-----------------------------------------------------------------------------
// Copyright (c) 2020 by ISLab This model is the confidential and
// proprietary property of ISLab and the possession or use of this
// file requires a written license from ISLab.
$2
endsnippet

snippet description "Description" b
//-----------------------------------------------------------------------------
// Description :
// $1
//-----------------------------------------------------------------------------
endsnippet

snippet pack "start" b
package `!v expand('%:p:h:t')`

import chisel3._
import chisel3.util._

class `!v expand('%:t:r')` extends Module {
  val io = IO(new Bundle {
  })

}

object `!v expand('%:t:r')`Driver extends App {
  chisel3.Driver.execute(args, ()=> new `!v expand('%:t:r')`)
}
endsnippet

snippet when "when" i
when($1) {
  $2
}$3
endsnippet

snippet elsewhen "elsewhen" i
.elsewhen($1){
  $2
}$3
endsnippet

snippet class "class" b
class $1 extends $2 {
  $3
}
endsnippet

snippet Tester "Testter" i
package `!v expand('%:p:h:t')`

import java.io.File
import chisel3._
import chisel3.iotesters
import chisel3.iotesters.{ChiselFlatSpec, Driver, PeekPokeTester}

class $1UnitTester(c: $1) extends PeekPokeTester(c){
  // test function here
}

class $1Tester extends ChiselFlatSpec {
  private val backendNames = if(firrtl.FileUtils.isCommandAvailable(Seq("verilator", "--version"))) {
    Array("firrtl", "verilator")
  }
  else {
    Array("firrtl")
  }
  for ( backendName <- backendNames ) {
    "$1" should s"calculate proper greatest common denominator (with $backendName)" in {
      Driver(() => new $1, backendName) {
        c => new $1UnitTester(c)
      } should be (true)
    }
  }

  "Basic test using Driver.execute" should "be used as an alternative way to run specification" in {
    iotesters.Driver.execute(Array(), () => new $1) {
      c => new $1UnitTester(c)
    } should be (true)
  }

  if(backendNames.contains("verilator")) {
    "using --backend-name verilator" should "be an alternative way to run using verilator" in {
      iotesters.Driver.execute(Array("--backend-name", "verilator"), () => new $1) {
        c => new $1UnitTester(c)
      } should be(true)
    }
  }
  "running with --is-verbose" should "show more about what's going on in your tester" in {
    iotesters.Driver.execute(Array("--is-verbose"), () => new $1) {
      c => new $1UnitTester(c)
    } should be(true)
  }
  /**
    * By default verilator backend produces vcd file, and firrtl and treadle backends do not.
    * Following examples show you how to turn on vcd for firrtl and treadle and how to turn it off for verilator
    */

  "running with --generate-vcd-output on" should "create a vcd file from your test" in {
    iotesters.Driver.execute(
      Array("--generate-vcd-output", "on", "--target-dir", "test_run_dir/make_a_vcd", "--top-name", "make_a_vcd"),
      () => new $1
    ) {
      c => new $1UnitTester(c)
    } should be(true)
    new File("test_run_dir/make_a_vcd/$1.vcd").exists should be (true)
  }
}

object $1Main extends App {
  iotesters.Driver.execute(args, () => new $1) {
    c => new $1UnitTester(c)
  }
}
endsnippet
